}
# lower case using try.error with sapply
apple_txt= sapply(apple_txt, try.error)
# remove NAs in some_txt
apple_txt = apple_txt[!is.na(apple_txt)]
names(apple_txt) = NULL
write.csv(apple_txt,'tweets.data.csv',row.names = F)
apple_tweets = searchTwitter("#prayforparis ", n=20000 ,lang= "en")
apple_tweets = searchTwitter("#parisattacks ", n=20000 ,lang= "en")
tweets = searchTwitter("#parisattacks ", n=20000 ,lang= "en")
tweets = searchTwitter("snow", n=20000 ,lang= "en")
tweets
tweet_txt = sapply(tweets, function(x) x$getText())
# remove retweet entities
tweet_txt = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", tweet_txt)
# remove at people
tweet_txt = gsub("@\\w+", "", tweet_txt)
# remove punctuation
tweet_txt = gsub("[[:punct:]]", "", tweet_txt)
# remove numbers
tweet_txt = gsub("[[:digit:]]", "", tweet_txt)
# remove html links
tweet_txt = gsub("http\\w+", "", tweet_txt)
# remove unnecessary spaces
tweet_txt = gsub("[ \t]{2,}", "", tweet_txt)
tweet_txt = gsub("^\\s+|\\s+$", "", tweet_txt)
# define "tolower error handling" function
try.error = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
# lower case using try.error with sapply
tweet_txt= sapply(tweet_txt, try.error)
# remove NAs in some_txt
tweet_txt = tweet_txt[!is.na(tweet_txt)]
names(tweet_txt) = NULL
write.csv(tweet_txt,'tweets.data.csv',row.names = F)
tweets = searchTwitter("cyber monday", n=2000 ,lang= "en")
library(twitteR)
library(sentiment)
library(plyr)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(base64enc)
library(httpuv)
access_token ="189054914-spjOBL1D4iSWnmrf7yP3MgkHgicePQDf5cSPH8AG"
access_token_secret="SUwxBFJuCY4mCtVeFBnoViUpI4X1d99PPlpqteSe3f711"
consumerKey = "kOytc2sHdtPcFFGu65IAt7RFf"
consumerSecret ="Yl0MTNoIkcLkllfSMig3WTY43VheGaHjeDF6mXw8YwI0dWgnE1"
setup_twitter_oauth(consumerKey,
consumerSecret,
access_token,
access_token_secret
)
tweets = searchTwitter("cyber monday", n=2000 ,lang= "en")
tweets = searchTwitter("cyber monday", n=20 ,lang= "en")
tweets
newdata <- read.csv("C:/MSBA/575 Statistical Model/Project/KidCreativenew.csv", header=TRUE)
SelectingData <- c("Income","Is.Female","Minors","White","Prev.Child.Mag","Buy")
ModifiedData <- newdata[SelectingData]
smp_size <- floor(0.70 * nrow(ModifiedData))
train_ind <- sample(seq_len(nrow(ModifiedData)), size = smp_size)
test_data <- ModifiedData[-train_ind,]
newdata_logit <- glm(Buy~Income+Is.Female+Minors+White+Prev.Child.Mag, family = "binomial", data =training_data)
newdata_logit <- glm(Buy~Income+Is.Female+Minors+White+Prev.Child.Mag, family = "binomial", data =training_data)
training_data <- ModifiedData[train_ind,]
test_data <- ModifiedData[-train_ind,]
newdata_logit <- glm(Buy~Income+Is.Female+Minors+White+Prev.Child.Mag, family = "binomial", data =training_data)
summary(newdata_logit)
test_data$test_pred = predict(newdata_logit, newdata=test_data, type = "response")
write.csv("C:/MSBA/575 Statistical Model/Project/test_data", file = file.choose())
write.csv("C:/MSBA/575 Statistical Model/Project/test_data", file = file.choose())
write.csv(test_data, file = file.choose())
model_pred_direction = rep(0,202)
model_pred_direction[test_pred > 0.9] = 1
model_pred_direction[test_pred > 0.9] = 1
test_data$test_pred = predict(newdata_logit, newdata=test_data, type = "response")
model_pred_direction[test_pred > 0.9] = 1
model_pred_direction[test_data$test_pred > 0.9] = 1
table(model_pred_direction,test_data$Buy)
model_pred_direction[test_data$test_pred > 0.5] = 1
table(model_pred_direction,test_data$Buy)
model_pred_direction[test_data$test_pred > 0.6] = 1
table(model_pred_direction,test_data$Buy)
model_pred_direction[test_data$test_pred > 0.7] = 1
table(model_pred_direction,test_data$Buy)
model_pred_direction[test_data$test_pred > 0.8] = 1
table(model_pred_direction,test_data$Buy)
model_pred_direction[test_data$test_pred > 0.9] = 1
table(model_pred_direction,test_data$Buy)
install.packages("swirl")
library(swirl)
ls()
rm(list=ms())
rm(list=ls())
swirl()
5+7
x<-5+6
x <- 5+6
x <- 5 + 6
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1,5,3.1)
z <- c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 + 1000
my_div
q()
x<- 4L
class(x)
a<-4L
class(x)
class(a)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
class(x)
x <- c(3, 5, 1, 10, 12, 6)
x[x<6]<-0
x
x <- c(3, 5, 1, 10, 12, 6)
x[x<6]==0
x
x <- c(3, 5, 1, 10, 12, 6)
x[x==0]<-6
x
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5]<-0
x
x <- 1:4
y <- 2:3
x+y
swirl()
swirl()
library(swirl)
rm(list=ls())
swirl()
5+7
x<-5+7
x
y<-x-3
y
c(1.1, 9, 3.14)
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10,100)
z*2+1000
my_div
exists()
0
0
exit()
exit
q()
remove.packages(swirl)
install.packages("swirl")
library(swirl)
rm(list=ls())
library(swirl)
x<-4L
class(x)
data=read.csv("C:\Users\Sanjib\Desktop\HPI_PO_summary.xls", header=TRUE)
data=read.table("C:\\Users\Sanjib\Desktop\HPI_PO_summary.xls", header=TRUE)
data=read.table("C:\Users\Sanjib\Desktop\HPI_PO_summary.xls", header=TRUE)
data=read.table("C:/Users/Sanjib/Desktop/HPI_PO_summary.xls", header=TRUE)
data=read.csv("C:/Users/Sanjib/Desktop/HPI_PO_summary.xls", header=TRUE)
data
data=read.csv("C:/Users/Sanjib/Desktop/HPI_PO_summary.xls", header=TRUE)
data=read.csv("C:/Users/Sanjib/Desktop/HPI_PO_summary.csv", header=TRUE)
data
head(3)
head(data)
data4 <- data$Purchase.Only.Index...1991Q1.100.
data4
for (i in data4){
change <- (data4[i+1]-data4[i])/data4[i]
}
for (i in data4){
change[i] <- (data4[i+1]-data4[i])/data4[i]
}
change
data4[2]
data4[1]
(data4[2]-data4[1])/data4[1]
for (i in data4){
change <-(data4[i+1]-data4[i])*100/data4[i]
}
change
change =(data4[2]-data4[1])/data4[1]
change
for (i in data4){
change <-(data4[i+1]-data4[i])*100/data4[i]
pcchange<-rbind(pcchange,change)
}
for (i in data4){
change <-(data4[i+1]-data4[i])*100/data4[i]
#pcchange<-rbind(pcchange,change)
}
pcchange=data.frame()
for (i in data4){
change <-(data4[i+1]-data4[i])*100/data4[i]
pcchange<-rbind(pcchange,change)
}
pcchange
data4[-1]-data4[-length(data4)]
(data4[-1]-data4[-length(data4)])*100/data4[-1]
index1<-(data4[-1]-data4[-length(data4)])*100/data4[-1]
data1=read.csv("C:/Users/Sanjib/Desktop/HPI_PO_summary.csv", header=TRUE)
plot.ts(index1,data1$Quarter)
index1<-c(0,(data4[-1]-data4[-length(data4)])*100/data4)
index
index1
plot.ts(index1,data1$Quarter)
plot(index1,data1$Quarter)
length(index1)
length(data1$Quarter)
index1<-(data4[-1]-data4[-length(data4)])*100/data4
data4 <- data1$Purchase.Only.Index...1991Q1.100.
index1<-(data4[-1]-data4[-length(data4)])*100/data4
index1
length(data1$Quarter)
plot(index1,data1$Quarter)
plot(data1$Quarter,index1)
date_<-c(data1$Year,data1$Quarter)
date_
date_<-interraction(data1$Year ,data1$Quarter, sep='/')
date_<-interaction(data1$Year ,data1$Quarter, sep='/')
date_
date_<-interaction(data1$Quarter,data1$Year , sep='/')
date_
library(zoo)
date_v<-as.Date(as.yearqtr(data_,format="Q%q/%Y"))
date_<-interaction(data1$Quarter,data1$Year , sep='/')
date_v<-as.Date(as.yearqtr(data_,format="Q%q/%Y"))
date_<-interaction('Q',data1$Quarter,data1$Year , sep='/')
date_<-interaction('Q',data1$Quarter,data1$Year , sep='/')
date_
date_<-interaction(c('Q',data1$Quarter),data1$Year , sep='/')
date_
date_<-interaction(data1$Quarter,data1$Year , sep='/')
date_
data1= unique(data1[,2:3])
date1
data1
data1= data1[-which(duplicated(data1[,c("Year","Quarter")]))]
data1
data1= data1[-which(duplicated(data1[,c("Year","Quarter")])),]
data1= data1[-which(duplicated(data1[,c("Year","Quarter")]))]
data1= data1[-which(duplicated(data1[,c("Year","Quarter")]))]
data1=read.csv("C:/Users/Sanjib/Desktop/HPI_PO_summary.csv", header=TRUE)
data1= data1[-which(duplicated(data1[,c("Year","Quarter")]))]
data1
head(data1)
data1=data1[,c(2,3,4)]
head(data1)
data1= data1[ -which(duplicated(data1[,c("Year","Quarter")])),]
head(data1)
data4 <- data1$Purchase.Only.Index...1991Q1.100.
index1<-(data4[-1]-data4[-length(data4)])*100/data4
date_<-interaction(data1$Quarter,data1$Year , sep='/')
summary(index1)
index1
data4 <- data1$Purchase.Only.Index...1991Q1.100.
data1=read.csv("C:/Users/Sanjib/Desktop/HPI_PO_summary.csv", header=TRUE)
data1=data1[,c(2,3,4)]
head(data1)
index1<-(data1[-1]-data4[-length(data1)])*100/data1
index1<-(data1[-1]-data1[-length(data1)])*100/data1
data1
data1= data1[ -which(duplicated(data1[,c("Year","Quarter")])),]
data1
index1<-(data1[-1]-data1[-length(data1)])*100/data1
data1= data1[- which(duplicated(data1[,c("Year","Quarter")])),]
data1
data1=read.csv("C:/Users/Sanjib/Desktop/HPI_PO_summary.csv", header=TRUE)
data1=data1[,c(2,3,4)]
data1
data1= data1[- which(duplicated(data1[,c("Year","Quarter")])),]
index1<-(data1[-1]-data1[-length(data1)])*100/data1
data4 <- data1$Purchase.Only.Index...1991Q1.100.
index1<-(data4[-1]-data4[-length(data4)])*100/data4
data4
index1
index1<-(data4[-1]-data4[-length(data4)])/data4
summary(index1)
setwd("C:/Users/Sanjib/Documents/Coursera/Assignment_3")
best <- function(state, outcome){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
#check the validity of state and outcome
validOutcome <- c("heart attack","heart failure", "pneumonia")
if(!outcome %in% validOutcome) {
stop("Invalid outcome") }
validState <- unique(data[,7])
if(!state %in% validState) {stop("invalid state")}
#Convert outcome into full column name
fullColName <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## Return hospital name in that state with lowest 30-day death rate
data.state <- data[data$State==state,]
indx <- which.min(as.double(data.state[,colName]))
data.state[indx,"Hospital.Name"]
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
setwd("C:/Users/Sanjib/Documents/Coursera/Assignment_3")
rankhospital <- function(state,outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
validOutcome <- c("heart attack", "heart failure", "pneumonia")
if(!outcome %in% validOutcome){ stop("Invalid outcome")}
validState <- unique(data[,7])
if(!state %in% validState) {stop("Invalid state")}
fullColName <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome, validOutcome)]
data.state <- data[data$State==state,]
sorted.data.state <- data.state[order( as.numeric(data.state[[colName]]), data.state["Hospital.Name"],na.last = NA),]
if (num =="best") num = 1
if (num =="worst") num= nrow(sorted.data.state)
sorted.data.state[num, "Hospital.Name"]
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("WA", "heart attack", 8)
rankhospital("WA", "heart attack", 1)
rankhospital("WA", "heart attack", 2)
rankhospital("WA", "heart attack", 3)
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("TX", "pneumonia", 9)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
validOutcome <- c("heart attack", "heart failure", "pneumonia")
if(!outcome %in% validOutcome){ stop("Invalid outcome")}
uniqueState <- sort(unique(data[,7]))
#if(!state %in% validState) {stop("Invalid state")}
fullColName <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome, validOutcome)]
hospital<- data.frame()
for (i in seq_along(uniqueState)){
data.state <- data[data$State==uniqueState[i],]
sorted.data.state <- data.state[order( as.numeric(data.state[[colName]]), data.state["Hospital.Name"],na.last = NA),]
if (num =="best") num = 1
if (num =="worst") num= nrow(sorted.data.state)
hospital <- rbind(hospital, data.frame(State=uniqueState[i],Hospital=sorted.data.state[num, "Hospital.Name"]) )
}
hospital
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
as.character(subset(r, State == "HI")$hospital)
r
as.character(subset(r, State == "HI")$Hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, State == "NJ")$Hospital)
r
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
validOutcome <- c("heart attack", "heart failure", "pneumonia")
uniqueState <- sort(unique(data[,7]))
fullColName <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome, validOutcome)]
colName <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
hospital<- data.frame()
data.state <- data[data$State=="NJ",]
sorted.data.state <- data.state[order( as.numeric(data.state[[colName]]), data.state["Hospital.Name"],na.last = NA),]
View(sorted.data.state)
nrow(sorted.data.state)
sorted.data.state[65,]
if (num =="best") num = 1
if (num =="worst") num= nrow(sorted.data.state)
setwd("C:/Users/Sanjib/Documents/Coursera/Assignment_3")
rankall <- function(outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
validOutcome <- c("heart attack", "heart failure", "pneumonia")
if(!outcome %in% validOutcome){ stop("Invalid outcome")}
uniqueState <- sort(unique(data[,7]))
#if(!state %in% validState) {stop("Invalid state")}
fullColName <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome, validOutcome)]
hospital<- data.frame()
for (i in seq_along(uniqueState)){
data.state <- data[data$State==uniqueState[i],]
sorted.data.state <- data.state[order( as.numeric(data.state[[colName]]), data.state["Hospital.Name"],na.last = NA),]
if (num =="best") num = 1
if (num =="worst") num= nrow(sorted.data.state)
hospital <- rbind(hospital, data.frame(State=uniqueState[i],Hospital=sorted.data.state[num, "Hospital.Name"]) )
}
hospital
}
r <- rankall("pneumonia", "worst")
View(r)
rankall <- function(outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
validOutcome <- c("heart attack", "heart failure", "pneumonia")
if(!outcome %in% validOutcome){ stop("Invalid outcome")}
uniqueState <- sort(unique(data[,7]))
#if(!state %in% validState) {stop("Invalid state")}
fullColName <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome, validOutcome)]
hospital<- data.frame()
for (i in seq_along(uniqueState)){
data.state <- data[data$State==uniqueState[i],]
sorted.data.state <- data.state[order( as.numeric(data.state[[colName]]), data.state["Hospital.Name"],na.last = NA),]
if (num =="best") num = 1
if (num =="worst") num= nrow(sorted.data.state)
hospital <- rbind(hospital, data.frame(State=uniqueState[i],Hospital=sorted.data.state[num, "Hospital.Name","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia",]) )
}
hospital
}
r <- rankall("pneumonia", "worst")
rankall <- function(outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
validOutcome <- c("heart attack", "heart failure", "pneumonia")
if(!outcome %in% validOutcome){ stop("Invalid outcome")}
uniqueState <- sort(unique(data[,7]))
#if(!state %in% validState) {stop("Invalid state")}
fullColName <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome, validOutcome)]
hospital<- data.frame()
for (i in seq_along(uniqueState)){
data.state <- data[data$State==uniqueState[i],]
sorted.data.state <- data.state[order( as.numeric(data.state[[colName]]), data.state["Hospital.Name"],na.last = NA),]
if (num =="best") num = 1
if (num =="worst") num= nrow(sorted.data.state)
hospital <- rbind(hospital, data.frame(State=uniqueState[i],rank= num,Hospital=sorted.data.state[num, "Hospital.Name",]) )
}
hospital
}
r <- rankall("pneumonia", "worst")
View(r)
View(sorted.data.state)
rankall <- function(outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
validOutcome <- c("heart attack", "heart failure", "pneumonia")
if(!outcome %in% validOutcome){ stop("Invalid outcome")}
uniqueState <- sort(unique(data[,7]))
#if(!state %in% validState) {stop("Invalid state")}
fullColName <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome, validOutcome)]
hospital<- data.frame()
for (i in seq_along(uniqueState)){
data.state <- data[data$State==uniqueState[i],]
sorted.data.state <- data.state[order( as.numeric(data.state[[colName]]), data.state["Hospital.Name"],na.last = NA),]
this.num=num
if (num =="best") this.num = 1
if (num =="worst") this.num= nrow(sorted.data.state)
hospital <- rbind(hospital, data.frame(State=uniqueState[i],rank= this.num,Hospital=sorted.data.state[this.num, "Hospital.Name",]) )
}
hospital
}
r <- rankall("pneumonia", "worst")
as.character(subset(r, State == "NJ")$Hospital)
rankall <- function(outcome, num = "best"){
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings = "Not Available")
validOutcome <- c("heart attack", "heart failure", "pneumonia")
if(!outcome %in% validOutcome){ stop("Invalid outcome")}
uniqueState <- sort(unique(data[,7]))
#if(!state %in% validState) {stop("Invalid state")}
fullColName <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome, validOutcome)]
hospital<- data.frame()
for (i in seq_along(uniqueState)){
data.state <- data[data$State==uniqueState[i],]
sorted.data.state <- data.state[order( as.numeric(data.state[[colName]]), data.state["Hospital.Name"],na.last = NA),]
rank=num
if (num =="best") rank = 1
if (num =="worst") rank= nrow(sorted.data.state)
hospital <- rbind(hospital, data.frame(state=uniqueState[i],hospital=sorted.data.state[rank, "Hospital.Name",]) )
}
hospital
}
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$sospital)
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
